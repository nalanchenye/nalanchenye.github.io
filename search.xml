<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/02/23/hello-world/"/>
      <url>/2022/02/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>五月份产品面试复盘</title>
      <link href="/2020/06/03/wu-yue-fen-chan-pin-mian-shi-fu-pan/"/>
      <url>/2020/06/03/wu-yue-fen-chan-pin-mian-shi-fu-pan/</url>
      
        <content type="html"><![CDATA[<blockquote><h1 id="五月份产品面试复盘"><a href="#五月份产品面试复盘" class="headerlink" title="五月份产品面试复盘"></a>五月份产品面试复盘</h1></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近陆陆续续面了携程、网易、百度、京东、旷视、快手、字节产品日常实习，最终拿到了字节商业产品(抖音搜索广告)的实习offer。借此机会总结一下面试过程，也希望能回馈牛客的朋友们。</p><h2 id="个人背景："><a href="#个人背景：" class="headerlink" title="个人背景："></a>个人背景：</h2><blockquote><p>如果发现表中有错误，请留言告知。</p></blockquote><table><thead><tr><th>公司</th><th>业务方向</th><th>offer情况</th></tr></thead><tbody><tr><td>字节跳动</td><td>商业产品-抖音搜索广告</td><td>√</td></tr><tr><td>旷视科技</td><td>B端产品-AI云平台</td><td>√</td></tr><tr><td>百度</td><td>视觉搜索产品、智能云产品</td><td>二面挂 /  √</td></tr><tr><td>网易</td><td>Saas产品</td><td>一面挂</td></tr><tr><td>携程</td><td>携程金融-用户增长</td><td>一面挂</td></tr><tr><td>京东</td><td>B端产品–智慧城市</td><td>一面挂</td></tr></tbody></table><h2 id="个人背景"><a href="#个人背景" class="headerlink" title="个人背景"></a>个人背景</h2><p>双非本科大四，保研至某985高校。之前有过两段实习经历，一段好未来运营，一段美团B端产品。所投的基本都是B端/商业化两个方向<br>此外有科研经历(用户画像–国家社科基金)、项目经历(三创赛国奖)、社团经历(策划水木年华演唱会)。但经过这么多次面试后发现，面试官重点考察的是<strong>实习经历以及个人的逻辑能力、分析能力</strong>。对于科研/社团/项目基本不感兴趣，因此正在找产品的同学可以把简历重点放在实习/项目经历上。</p><h2 id="面试概况："><a href="#面试概况：" class="headerlink" title="面试概况："></a>面试概况：</h2><p>经过陆陆续续10多次的面试，发现所有面试官的共性是对于实习经历的深挖。实习期间做的每一个需求/项目的背景、目标都要有十分清晰的描述、收益最好能量化表达。重点关注的是为什么要做这个需求，以及做产品方案的设计维度，需求分析的整个流程。</p><p>此外也会在面试中问一些与业务相关的问题，重点考察逻辑分析能力</p><h2 id="面试问题总结："><a href="#面试问题总结：" class="headerlink" title="面试问题总结："></a>面试问题总结：</h2><p><strong>（这里只说明一些与业务相关问题，欢迎大家讨论）</strong></p><p>1、百度视觉搜索产品：</p><p>（1）百度图片下方有个搜索的按钮(没用过)，问我如果点击搜索，预测下级页面会有哪些功能？</p><p>（2）这些功能模块设置是否合理，有没有什么改进？ 如果你点击搜索到下一个界面，你会继续点击使用哪个功能模块？（只有 图片出处、外观相似的图片、识图游乐园三个模块）</p><p>（3）如果最近一段时间某个功能模块点击率降低了，分析原因。</p><p>2、字节教育部门AI产品：</p><p>怎么提高拍照搜题的命中率</p><p>3、字节商业产品–抖音搜索广告：</p><p>（1）比较抖音以及头条的人均广告收入，定义是广告总收入/用户总数</p><p>答：抖音的广告收入87%来自于信息流广告，因此重点比较了头条和抖音在信息流广告业务创造的人均收入，信息流广告收入=每日播放视频/刷新新闻总数 *  Ad load * CPM。估算抖音的Ad load在10%左右，头条可能在15%左右，但因为头条涉及到点击率，CPM费用要远低于抖音，因此估计抖音人均带来的广告收入要大于头条。（当时只是粗略的估算了一下，也欢迎大家补充指教）</p><p>（2）怎么计算抖音的Ad load</p><p>（3）抖音和快手在营收构成上的区别，以及原因。</p><p>（4）抖音和快手在未来的广告收入和直播+电商收入，各自占比会不会达到一半？</p><p>（5）什么原因会导致抖音在未来发展中面临重大危机</p><p>（6）分析美团的营收结构</p><p>（7）分析美团单车的营收结构，我所做的工作有什么意义，美团收购摩拜的意义(我延伸出来的)。</p><p>（8）怎么看待共享单车未来的发展</p><p>（9）最常使用的3款app产品，各自用一句话描述这个产品对我的价值，以及可以改进的功能点<br>答了 抖音、头条、微信读书这三款app。</p><p>（10）流量变现的方式</p><p>（11）字节未来的营收结构构成</p><p>（12）为什么想来字节，两段实习哪一个收获最大</p><p>（13）十分满分的话上段实习经历给自己打几分，mentor会给自己打几分</p><p>（14）自己的优缺点、对产品经理的理解、未来的规划（随后问了为什么这么早就确定了B端/商业化两个方向）</p><p>（15）跨部门合作遇到的问题/困难，怎么解决的。</p><p>4、旷视B端产品：</p><p>（1）问了需求立项、需求评估的过程。</p><p>因为在美团的实习是面向内部系统的小B方向，旷视是对外的大B方向，需求的立项和评估流程更加规范和标准。</p><p>（2）设计一款智能跑鞋</p><p>从目标用户画像分析、产品定位、竞品对比、产品功能设计、营销渠道进行了分析</p><p>5、京东B端产品：</p><p>问了一个B端产品比较经典的问题：</p><p>客户端：老板的意见更重要还是老板公司里100个使用的用户的意见更重要</p><p>6、携程金融-用户增长产品：</p><p>携程金融APP怎么做用户增长</p><p>忽略了很重要的一个点：携程APP的导流（这个占据了携程金融一半的用户增长）</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>1、经过10多轮的面试，发现无论是对于实习的复盘还是对于面试的复盘都十分重要，面试官会深挖实习的每一个细节以及你的思考历程。</p><p>2、每一次面试都是对于自己经历的复盘，同时也是一次和面试官平等沟通、交流经验的过程。</p><p>3、提前准备业务方向相关基础知识很重要，多与人沟通交流很重要。</p><p>4、字节、旷视、网易是面试体验最好的三家。</p><p>希望大家都能收获offer，希望我们实习顺利。欢迎交流~</p><blockquote><p><strong>转载声明</strong></p><p><strong>作者</strong>：小刘同学o<br><strong>原文链接</strong>：<a href="https://www.nowcoder.com/discuss/435305" target="_blank" rel="noopener">https://www.nowcoder.com/discuss/435305</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 职前学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 产品 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自学入门 Python 优质中文资源索引</title>
      <link href="/2020/03/30/zi-xue-ru-men-python-you-zhi-zhong-wen-zi-yuan-suo-yin/"/>
      <url>/2020/03/30/zi-xue-ru-men-python-you-zhi-zhong-wen-zi-yuan-suo-yin/</url>
      
        <content type="html"><![CDATA[<blockquote><p>所有资源基于 Python3 版本，全部中文内容，适用于 爬虫 / Web / 数据 方向，每个单元根据学习习惯从 书籍 / 文档 / 视频 中选择一类即可，建议任选一本书籍，然后配合文档类进行学习。<br>资源遵守“宁缺毋滥”的原则，均经过网评筛选或个人亲测，不推荐各类低质量大杂烩的文章书籍，力求少走弯路。<br>通过本文链接资源坚持学习，可真正的零基础自学入门 Python ，实测已帮助两位零编程基础的朋友入门。<br>本索引清单将长期更新，更替更好的资源，请收藏的同时别忘了点个赞！也欢迎通过私信等方式补充推荐。</p></blockquote><h2 id="1-1-语言基础"><a href="#1-1-语言基础" class="headerlink" title="1.1 语言基础"></a>1.1 语言基础</h2><h4 id="书籍类（任选"><a href="#书籍类（任选" class="headerlink" title="书籍类（任选)"></a>书籍类（任选)</h4><p><a href="https://item.jd.com/11993134.html?cu=true&utm_source=kong&utm_medium=tuiguang&utm_campaign=t_1001542270_1000008160_0_1929571479&utm_term=3a5041eb2363478d977b6ce59798dcc2" target="_blank" rel="noopener">Python 编程：从入门到实践</a><br><a href="https://item.jd.com/12202703.html?cu=true&utm_source=kong&utm_medium=tuiguang&utm_campaign=t_1001542270_1000008160_0_1929571479&utm_term=281a2ca3f6a74137b27bb9a8b171b61c" target="_blank" rel="noopener">Python 游戏编程快速上手 – 通过游戏趣味入门</a><br><a href="https://item.jd.com/10062788.html?cu=true&utm_source=kong&utm_medium=tuiguang&utm_campaign=t_1001542270_1000008160_0_1929571479&utm_term=3386f9ebe12c46ffb44e4a9c494004aa" target="_blank" rel="noopener">Python 核心编程 – 适合有编程基础</a>  </p><h4 id="视频类（任选）"><a href="#视频类（任选）" class="headerlink" title="视频类（任选）"></a>视频类（任选）</h4><p><a href="https://www.bilibili.com/video/av27789609" target="_blank" rel="noopener">小甲鱼零基础入门 Python</a><br><a href="https://www.icourse163.org/course/BIT-268001" target="_blank" rel="noopener">Python 语言程序设计_北京理工大学_中国大学 MOOC</a>  </p><h4 id="文档类（任选）"><a href="#文档类（任选）" class="headerlink" title="文档类（任选）"></a>文档类（任选）</h4><p><a href="http://www.runoob.com/python3/python3-tutorial.html" target="_blank" rel="noopener">菜鸟教程 — 适合零基础</a><br><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">廖雪峰教程 — 适合有编程基础</a><br><a href="https://yiyibooks.cn/xx/python_352/index.html" target="_blank" rel="noopener">官方文档翻译 — 适合其他语言转学</a>  </p><hr><h2 id="1-2-语言进阶"><a href="#1-2-语言进阶" class="headerlink" title="1.2 语言进阶"></a>1.2 语言进阶</h2><h4 id="书籍类（任选-1"><a href="#书籍类（任选-1" class="headerlink" title="书籍类（任选)"></a>书籍类（任选)</h4><p><a href="https://item.jd.com/12186192.html?cu=true&utm_source=kong&utm_medium=tuiguang&utm_campaign=t_1001542270_1000008160_0_1929571479&utm_term=b13a193f9b934ac5a3d91bb5b338c120" target="_blank" rel="noopener">流畅的 Python – 必读经典</a><br><a href="https://item.jd.com/11681561.html?cu=true&utm_source=kong&utm_medium=tuiguang&utm_campaign=t_1001542270_1000008160_0_1929571479&utm_term=cd8772417e5a43fd91e4ef3f69e65527" target="_blank" rel="noopener">Python Cookbook – 必读经典</a><br><a href="https://item.jd.com/12336391.html?cu=true&utm_source=kong&utm_medium=tuiguang&utm_campaign=t_1001542270_1000008160_0_1929571479&utm_term=9464e258ce0546cba144091d8fdfb4f6" target="_blank" rel="noopener">图解数据结构 Python 版</a><br><a href="https://item.jd.com/12385123.html?cu=true&utm_source=kong&utm_medium=tuiguang&utm_campaign=t_1001542270_1000008160_0_1929571479&utm_term=78fedcb68cba49d681fa7590b62fe954" target="_blank" rel="noopener">Python 3 面向对象编程 – Web开发必读</a>  </p><hr><h2 id="2-1-爬虫基础"><a href="#2-1-爬虫基础" class="headerlink" title="2.1 爬虫基础"></a>2.1 爬虫基础</h2><h4 id="书籍类（任选）"><a href="#书籍类（任选）" class="headerlink" title="书籍类（任选）"></a>书籍类（任选）</h4><p><a href="https://item.jd.com/1179243750.html?cu=true&utm_source=kong&utm_medium=tuiguang&utm_campaign=t_1001542270_1000008160_0_1929571479&utm_term=fd56d83454434af7953d5d0df0c2c5bf" target="_blank" rel="noopener">图解HTTP — 零基础必读</a><br><a href="https://item.jd.com/49825026628.html?cu=true&utm_source=kong&utm_medium=tuiguang&utm_campaign=t_1001542270_1000008160_0_1929571479&utm_term=c5522372b8fb464dbb98a26ec96aae36" target="_blank" rel="noopener">Python3 网络爬虫开发实战 – 必读</a><br><a href="https://item.jd.com/45942848920.html?cu=true&utm_source=kong&utm_medium=tuiguang&utm_campaign=t_1001542270_1000008160_0_1929571479&utm_term=7e35b89bfe3f41189ecb222c7f111a50" target="_blank" rel="noopener">Android软件安全权威指南 – 爬虫逆向进阶</a>  </p><h4 id="视频类（全学）"><a href="#视频类（全学）" class="headerlink" title="视频类（全学）"></a>视频类（全学）</h4><p><a href="https://www.icourse163.org/course/BIT-1001870001" target="_blank" rel="noopener">Python 网络爬虫与信息提取_北京理工大学_中国大学MOOC</a><br><a href="https://edu.hellobi.com/course/157" target="_blank" rel="noopener">零基础入门 Python3 爬虫_崔庆才</a></p><h4 id="文档类（全学）"><a href="#文档类（全学）" class="headerlink" title="文档类（全学）"></a>文档类（全学）</h4><p><a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="noopener">HTTP 协议入门_阮一峰 — 零基础必读</a><br><a href="http://docs.python-requests.org/zh_CN/latest/user/quickstart.html" target="_blank" rel="noopener">Requests 官方文档翻译</a><br><a href="https://beautifulsoup.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">Beautiful Soup 官方文档翻译</a><br><a href="https://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html" target="_blank" rel="noopener">Python 正则表达式指南</a><br><a href="http://www.w3school.com.cn/xpath/index.asp" target="_blank" rel="noopener">XPath 教程</a><br><a href="https://scrapy-chs.readthedocs.io/zh_CN/1.0/intro/install.html" target="_blank" rel="noopener">Scrapy 官方文档翻译</a><br><a href="https://selenium-python-zh.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">Selenium-Python 官方文档翻译</a></p><hr><h2 id="2-2-Flask-框架"><a href="#2-2-Flask-框架" class="headerlink" title="2.2 Flask 框架"></a>2.2 Flask 框架</h2><h4 id="书籍类（任选）-1"><a href="#书籍类（任选）-1" class="headerlink" title="书籍类（任选）"></a>书籍类（任选）</h4><p><a href="https://item.jd.com/1179243750.html?cu=true&utm_source=kong&utm_medium=tuiguang&utm_campaign=t_1001542270_1000008160_0_1929571479&utm_term=fd56d83454434af7953d5d0df0c2c5bf" target="_blank" rel="noopener">图解HTTP — 零基础必读</a><br><a href="https://item.jd.com/32885183767.html?cu=true&utm_source=kong&utm_medium=tuiguang&utm_campaign=t_1001542270_1000008160_0_1929571479&utm_term=f286c6172dbd4b02b2e1ce1725e7fddd" target="_blank" rel="noopener">Flask Web开发实战（狼书） – 必读，Flask 核心开发创作</a>  </p><h4 id="文档类（全学）-1"><a href="#文档类（全学）-1" class="headerlink" title="文档类（全学）"></a>文档类（全学）</h4><p><a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="noopener">HTTP 协议入门_阮一峰 — 零基础必读</a><br><a href="http://docs.jinkan.org/docs/flask/" target="_blank" rel="noopener">Flask 官方文档翻译</a><br><a href="http://helloflask.com/tutorial/" target="_blank" rel="noopener">Flask 入门教程 – 强推，Flask 核心开发创作</a><br><a href="http://www.pythondoc.com/flask-mega-tutorial/" target="_blank" rel="noopener">Flask mega-tutorial 中文翻译 — Web微框架指南</a><br><a href="http://docs.jinkan.org/docs/jinja2/" target="_blank" rel="noopener">Jinja2 官方文档翻译</a>  </p><hr><h2 id="2-3-Django-框架"><a href="#2-3-Django-框架" class="headerlink" title="2.3 Django 框架"></a>2.3 Django 框架</h2><h4 id="书籍类（任选）-2"><a href="#书籍类（任选）-2" class="headerlink" title="书籍类（任选）"></a>书籍类（任选）</h4><p><a href="https://item.jd.com/1179243750.html?cu=true&utm_source=kong&utm_medium=tuiguang&utm_campaign=t_1001542270_1000008160_0_1929571479&utm_term=fd56d83454434af7953d5d0df0c2c5bf" target="_blank" rel="noopener">图解HTTP — 零基础必读</a><br><a href="https://item.jd.com/12537842.html?cu=true&utm_source=kong&utm_medium=tuiguang&utm_campaign=t_1001542270_1000008160_0_1929571479&utm_term=e74f4a006d274bfd9ff0a039609208c9" target="_blank" rel="noopener">Django企业开发实战</a>  </p><h4 id="文档类（全学）-2"><a href="#文档类（全学）-2" class="headerlink" title="文档类（全学）"></a>文档类（全学）</h4><p><a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="noopener">HTTP 协议入门_阮一峰 — 零基础必读</a><br><a href="https://docs.djangoproject.com/zh-hans/3.0/" target="_blank" rel="noopener">Django 3.0 官方文档</a>  </p><hr><h2 id="2-4-Web-前端"><a href="#2-4-Web-前端" class="headerlink" title="2.4 Web 前端"></a>2.4 Web 前端</h2><h4 id="书籍类（任选）-3"><a href="#书籍类（任选）-3" class="headerlink" title="书籍类（任选）"></a>书籍类（任选）</h4><p><a href="https://item.jd.com/11090963.html?cu=true&utm_source=kong&utm_medium=tuiguang&utm_campaign=t_1001542270_1000008160_0_1929571479&utm_term=805b7ab7e7a4406e97af470023f41dd5" target="_blank" rel="noopener">JavaScript 语言精粹（修订版）</a><br><a href="https://item.jd.com/49883132371.html?cu=true&utm_source=kong&utm_medium=tuiguang&utm_campaign=t_1001542270_1000008160_0_1929571479&utm_term=518dad27c6e24318be217ac6391b7a74" target="_blank" rel="noopener">CSS 揭秘</a><br><a href="https://item.jd.com/12517946.html?cu=true&utm_source=kong&utm_medium=tuiguang&utm_campaign=t_1001542270_1000008160_0_1929571479&utm_term=a6ed70c74a5949c28719ee3c824e387e" target="_blank" rel="noopener">Vue.js 快速入门</a><br><a href="https://item.jd.com/12068636.html?cu=true&utm_source=kong&utm_medium=tuiguang&utm_campaign=t_1001542270_1000008160_0_1929571479&utm_term=8bee6545d5b644309bcfe96fd755c41d" target="_blank" rel="noopener">深入 React 技术栈</a>  </p><h4 id="文档类（全学）-3"><a href="#文档类（全学）-3" class="headerlink" title="文档类（全学）"></a>文档类（全学）</h4><p><a href="http://www.w3school.com.cn/js/index.asp" target="_blank" rel="noopener">JavaScript 教程</a><br><a href="https://cn.vuejs.org/v2/guide/index.html" target="_blank" rel="noopener">Vue.js 官方中文文档</a><br><a href="https://www.reactjscn.com/docs/hello-world.html" target="_blank" rel="noopener">React 官方文档</a><br><a href="https://www.tslang.cn/docs/home.html" target="_blank" rel="noopener">TypeScript 官方文档</a>  </p><hr><h2 id="2-5-数据分析"><a href="#2-5-数据分析" class="headerlink" title="2.5 数据分析"></a>2.5 数据分析</h2><h4 id="书籍类（任选）-4"><a href="#书籍类（任选）-4" class="headerlink" title="书籍类（任选）"></a>书籍类（任选）</h4><p><a href="https://item.jd.com/29428299573.html?cu=true&utm_source=kong&utm_medium=tuiguang&utm_campaign=t_1001542270_1000008160_0_1929571479&utm_term=81d3ab8edd92497c9f654e9207e75dff" target="_blank" rel="noopener">Python 数据科学手册</a><br><a href="https://item.jd.com/12398725.html?cu=true&utm_source=kong&utm_medium=tuiguang&utm_campaign=t_1001542270_1000008160_0_1929571479&utm_term=f0e26ff1309a432a8bec157e32638e09" target="_blank" rel="noopener">利用 Python 进行数据分析</a>  </p><h4 id="文档类（全学）-4"><a href="#文档类（全学）-4" class="headerlink" title="文档类（全学）"></a>文档类（全学）</h4><p><a href="https://www.jianshu.com/p/62f155eb6ac5" target="_blank" rel="noopener">Anaconda 教程</a><br><a href="https://blog.csdn.net/DataCastle/article/details/78890469" target="_blank" rel="noopener">Jupyter Notebook 教程</a><br><a href="https://www.numpy.org.cn/" target="_blank" rel="noopener">NumPy 官方文档翻译</a><br><a href="https://www.yiibai.com/pandas/python_pandas_environment_setup.html" target="_blank" rel="noopener">Pandas 教程</a><br><a href="https://github.com/BrambleXu/pydata-notebook?utm_medium=social&utm_source=qq" target="_blank" rel="noopener">利用Python进行数据分析 中文翻译笔记</a>  </p><hr><h2 id="2-6-机器学习"><a href="#2-6-机器学习" class="headerlink" title="2.6 机器学习"></a>2.6 机器学习</h2><h4 id="书籍类（任选）-5"><a href="#书籍类（任选）-5" class="headerlink" title="书籍类（任选）"></a>书籍类（任选）</h4><p><a href="https://item.jd.com/11867803.html?cu=true&utm_source=kong&utm_medium=tuiguang&utm_campaign=t_1001542270_1000008160_0_1929571479&utm_term=2f2a53c477cd4c2f84a3a2cf70a222f6" target="_blank" rel="noopener">机器学习 (西瓜书)</a><br><a href="https://item.jd.com/12128543.html?cu=true&utm_source=kong&utm_medium=tuiguang&utm_campaign=t_1001542270_1000008160_0_1929571479&utm_term=c4343287898b4740b16ab2f5f60edbb2" target="_blank" rel="noopener">机器学习实战</a>  </p><h4 id="视频类（任选）-1"><a href="#视频类（任选）-1" class="headerlink" title="视频类（任选）"></a>视频类（任选）</h4><p><a href="https://study.163.com/course/courseMain.htm?courseId=1004570029" target="_blank" rel="noopener">吴恩达机器学习 - 网易云课堂 — 免费 必学</a>  </p><h4 id="文档类（任选）-1"><a href="#文档类（任选）-1" class="headerlink" title="文档类（任选）"></a>文档类（任选）</h4><p><a href="https://github.com/fengdu78/Coursera-ML-AndrewNg-Notes" target="_blank" rel="noopener">吴恩达机器学习笔记 — 相当于视频的文字版</a>  </p><hr><h2 id="3-数据库"><a href="#3-数据库" class="headerlink" title="3. 数据库"></a>3. 数据库</h2><h4 id="书籍类（任选）-6"><a href="#书籍类（任选）-6" class="headerlink" title="书籍类（任选）"></a>书籍类（任选）</h4><p><a href="https://item.jd.com/11220393.html?cu=true&utm_source=kong&utm_medium=tuiguang&utm_campaign=t_1001542270_1000008160_0_1929571479&utm_term=da846dfe1fa14db6a18bf1bed15e3869" target="_blank" rel="noopener">高性能 MySQL</a><br><a href="https://item.jd.com/11384782.html?cu=true&utm_source=kong&utm_medium=tuiguang&utm_campaign=t_1001542270_1000008160_0_1929571479&utm_term=0c7bacdc0b25430eb1a1ae9c486f3f15" target="_blank" rel="noopener">MongoDB 权威指南</a><br><a href="https://item.jd.com/11486101.html?cu=true&utm_source=kong&utm_medium=tuiguang&utm_campaign=t_1001542270_1000008160_0_1929571479&utm_term=940b141ea7bb4374a4eba79f6dee4d07" target="_blank" rel="noopener">Redis 设计与实现</a>  </p><h4 id="文档类（全学）-5"><a href="#文档类（全学）-5" class="headerlink" title="文档类（全学）"></a>文档类（全学）</h4><p><a href="http://www.runoob.com/redis/redis-tutorial.html" target="_blank" rel="noopener">Redis 教程</a><br><a href="http://www.w3school.com.cn/sql/index.asp" target="_blank" rel="noopener">SQL 教程</a><br><a href="https://www.jianshu.com/p/0ad18fdd7eed" target="_blank" rel="noopener">SQLAlchemy 教程</a><br><a href="http://www.mongoing.com/docs/" target="_blank" rel="noopener">MongoDB 官方中文文档 — 爬虫优先</a><br><a href="https://www.cnblogs.com/zhouxuchen/p/5544227.html" target="_blank" rel="noopener">PyMongo 官方文档部分翻译 — 爬虫优先</a>  </p><hr><h2 id="4-异步IO"><a href="#4-异步IO" class="headerlink" title="4. 异步IO"></a>4. 异步IO</h2><h4 id="文档类（任选）-2"><a href="#文档类（任选）-2" class="headerlink" title="文档类（任选）"></a>文档类（任选）</h4><p><a href="https://zhuanlan.zhihu.com/p/25228075" target="_blank" rel="noopener">从0到1，Python异步编程的演进之路 — 强烈推荐</a><br><a href="http://python.jobbole.com/88291/" target="_blank" rel="noopener">深入理解 Python 异步编程 — 可惜只有上篇</a><br><a href="https://www.jianshu.com/p/b5e347b3a17c" target="_blank" rel="noopener">Python 黑魔法 之 asyncio 协程</a><br><a href="http://demo.pythoner.com/itt2zh/index.html" target="_blank" rel="noopener">Introduction to Tornado 中文翻译</a><br><a href="https://blog.csdn.net/u010159842/article/details/56480219" target="_blank" rel="noopener">Gevent 开发指南</a><br><a href="https://likebeta.gitbooks.io/twisted-intro-cn/content/zh/" target="_blank" rel="noopener">Twisted与异步编程入门 — Scrapy爬虫进阶</a>  </p><blockquote><p><strong>转载声明</strong></p><p><strong>作者</strong>：张凯强<br><strong>原文链接</strong>：<a href="https://zkqiang.cn/posts/9e9084fe/" target="_blank" rel="noopener">https://zkqiang.cn/posts/9e9084fe/</a><br><strong>作者简介</strong>： 后端开发 / 游戏爱好者 / 巴萨球迷</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一道快速考察 Python 基础的面试题</title>
      <link href="/2020/03/30/yi-dao-kuai-su-kao-cha-python-ji-chu-de-mian-shi-ti/"/>
      <url>/2020/03/30/yi-dao-kuai-su-kao-cha-python-ji-chu-de-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是前一阵子群友发在群里的一道面试题，利用 Python 字典的特性，可以巧妙地使用精简代码达成完美解。</p></blockquote><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>将 data 转换成 new_data 这种形式，写出转换过程。</p><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'a_b_h'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">'a_b_i'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'a_c_j'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>    <span class="token string">'a_d'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span>    <span class="token string">'a_c_k'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span>    <span class="token string">'a_e'</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">}</span>new_data <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'a'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token string">'b'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token string">'h'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">'i'</span><span class="token punctuation">:</span><span class="token number">2</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'c'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token string">'j'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>            <span class="token string">'k'</span><span class="token punctuation">:</span><span class="token number">5</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'d'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span>        <span class="token string">'e'</span><span class="token punctuation">:</span><span class="token number">6</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，转换的过程是将 key 的下划线进行拆分，然后下划线后边的字符嵌套在前面字符的值中。</p><p>感兴趣就打开 IDE，自己先试着解一下。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>你应该很快想到，主要思路是将下划线 <code>split</code> 后，然后依次使用字符生成内层字典，当达到最后一个字符时将数字作为值。</p><p>那么关键点在于，如何不断地获得内层字典去修改呢？实际本题就是考察你是否理解 Python 字典是<strong>引用传递</strong>这个特性。</p><p>什么是引用传递？我们知道 Python 中<strong>字典和列表对象都是可变对象</strong>，同一个字典对象的变量不管如何传递，只要改变其中一个变量会同步修改其他变量。这是因为变量存储的只是可变对象的引用，无论调用哪个变量，返回的依然是同一个对象。比如：</p><pre class="line-numbers language-python"><code class="language-python">new_data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>tmp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>new_data<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token keyword">print</span><span class="token punctuation">(</span>new_data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># {'a': {}}</span>tmp<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># {'a': {'b': 1}}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上，利用这个特性，将内层字典赋值给一个中间变量，然后改变这个中间变量，即可同步修改最终的 new_data 变量。</p><p>根据这个思路，初步代码如下：</p><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'a_b_h'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">'a_b_i'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'a_c_j'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>    <span class="token string">'a_d'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span>    <span class="token string">'a_c_k'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span>    <span class="token string">'a_e'</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">}</span>new_data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> data<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    keys <span class="token operator">=</span> key<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span>    tmp <span class="token operator">=</span> new_data    last <span class="token operator">=</span> len<span class="token punctuation">(</span>keys<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 最后一个 key 的索引值 </span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> k <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> last<span class="token punctuation">:</span>            tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> value            <span class="token keyword">continue</span>        <span class="token keyword">if</span> k <span class="token operator">not</span> <span class="token keyword">in</span> tmp<span class="token punctuation">:</span>            sub_tmp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> sub_tmp            tmp <span class="token operator">=</span> sub_tmp        <span class="token keyword">else</span><span class="token punctuation">:</span>            tmp <span class="token operator">=</span> tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这也是群友给出的第一版答案，这样写并没有多大问题，但是代码比较繁琐，肯定还有优化空间。</p><p>我们可以只使用一个中间变量即可，进一步优化：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> field<span class="token punctuation">,</span> value <span class="token keyword">in</span> data<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     keys <span class="token operator">=</span> field<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span>     tmp <span class="token operator">=</span> new_data     last <span class="token operator">=</span> len<span class="token punctuation">(</span>keys<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> k <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">if</span> k <span class="token operator">not</span> <span class="token keyword">in</span> tmp<span class="token punctuation">:</span>            tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">if</span> i <span class="token operator">&lt;</span> last <span class="token keyword">else</span> value        tmp <span class="token operator">=</span> tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 将内层 dict 传给 tmp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这个代码看似很简洁了，但是仍然还有两个 if 判断，如果不是使用了三元表达式的话，还会更多行。</p><p>所以可以进一步优化：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> field<span class="token punctuation">,</span> value <span class="token keyword">in</span> data<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     keys <span class="token operator">=</span> field<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span>     tmp <span class="token operator">=</span> new_data     <span class="token keyword">for</span> k <span class="token keyword">in</span> keys<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>         tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    tmp<span class="token punctuation">[</span>keys<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们省略掉了 last 来判断最后一个字符的索引，直接通过 <code>keys[:-1]</code> 避开最后一个字符，末尾再单独生成数字键值对。</p><p>这里还使用字典的一个内置方法 —— <code>setdefault</code>。</p><p><code>dict.setdefault(key, default=None)</code> 方法和 <code>get</code> 方法类似，只是如果键不存在于字典中，不仅会返回 default 参数的值，还同时会用该值自动生成一个键值对。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> k <span class="token operator">not</span> <span class="token keyword">in</span> tmp<span class="token punctuation">:</span>    tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>v <span class="token operator">=</span> tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 等价于</span>v <span class="token operator">=</span> tmp<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终我们使用了 6 行代码就解出该题，这也是接近最简代码。</p><p>如果使用字典引用的特性是合格分的话，那么当你用出 <code>setdefault</code> 这个方法后，面试官已经给你打了优秀，因此<strong>一定要熟悉基础数据对象的所有内置方法</strong>。</p><blockquote><p><strong>转载声明</strong></p><p><strong>作者</strong>：张凯强<br><strong>原文链接</strong>：<a href="https://zkqiang.cn/posts/1273f6f1/" target="_blank" rel="noopener">https://zkqiang.cn/posts/1273f6f1/</a><br><strong>作者简介</strong>： 后端开发 / 游戏爱好者 / 巴萨球迷</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫工程师常用的 Chrome 插件</title>
      <link href="/2020/03/30/pa-chong-gong-cheng-shi-chang-yong-de-chrome-cha-jian/"/>
      <url>/2020/03/30/pa-chong-gong-cheng-shi-chang-yong-de-chrome-cha-jian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>做多了爬虫都知道，写一个爬虫大部分时间不是在代码上，而是在分析网页上，所有有一套好用的工具可以极大节省劳动力，这里把平时积累的一些 Chrome 插件分享出来，均来自本人和同事推荐，并不定时更新，欢迎点赞和收藏。<br>下面大标题指向的是谷歌应用商店，访问需要特殊方法，也可以进入本仓库的 <code>extensions</code> 目录中下载。</p></blockquote><h2 id="XPath-Helper"><a href="#XPath-Helper" class="headerlink" title="XPath Helper"></a><a href="https://chrome.google.com/webstore/detail/xpath-helper/hgimnogjllphhhkhlmebbmlgjoejdpjl" target="_blank" rel="noopener">XPath Helper</a></h2><p><img src="https://static.zkqiang.cn/images/20190729094906.png-slim" alt="XPath Helper"></p><p>相比较 Chrome 自身的 html 搜索，这款插件好用之处是可以显示匹配结果，在插件里写出正确的 XPath 语句后再复制到代码里即可。</p><h2 id="Toggle-JavaScript"><a href="#Toggle-JavaScript" class="headerlink" title="Toggle JavaScript"></a><a href="https://chrome.google.com/webstore/detail/toggle-javascript/cidlcjdalomndpeagkjpnefhljffbnlo" target="_blank" rel="noopener">Toggle JavaScript</a></h2><p><img src="https://static.zkqiang.cn/images/20190729094907.png-slim" alt="Toggle JavaScript"></p><p>一键拦截网页所有的 JS，可以快速区分出哪些是异步加载的数据，绝对是爬虫必备神器。</p><h2 id="FeHelper"><a href="#FeHelper" class="headerlink" title="FeHelper"></a><a href="https://chrome.google.com/webstore/detail/web%E5%89%8D%E7%AB%AF%E5%8A%A9%E6%89%8Bfehelper/pkgccpejnmalmdinmhkkfafefagiiiad" target="_blank" rel="noopener">FeHelper</a></h2><p><img src="https://static.zkqiang.cn/images/20190729094903.png-slim" alt="FeHelper"></p><p>这款插件的强大之处不想多说，看上面的截图就行了，其中一些数据转换的功能，在分析请求时会经常用到。</p><h2 id="JSON-Handle"><a href="#JSON-Handle" class="headerlink" title="JSON-Handle"></a><a href="https://chrome.google.com/webstore/detail/json-handle/iahnhfdhidomcpggpaimmmahffihkfnj" target="_blank" rel="noopener">JSON-Handle</a></h2><p><img src="https://static.zkqiang.cn/images/20190729095522.png-slim" alt="JSON-Handle"></p><p>这是由知乎 @流沙 推荐的 JSON 格式化插件，虽然上面推荐的已经带有 JSON 功能，但这款插件带有局部选取、对象类型、数组长度等小功能，我试用了几天很实用，适合有额外需求的时候。</p><h2 id="User-Agent-Switcher"><a href="#User-Agent-Switcher" class="headerlink" title="User-Agent Switcher"></a><a href="https://chrome.google.com/webstore/detail/user-agent-switcher-for-c/djflhoibgkdhkhhcedjiklpkjnoahfmg" target="_blank" rel="noopener">User-Agent Switcher</a></h2><p><img src="https://static.zkqiang.cn/images/20190729094904.png-slim" alt="User-Agent Switcher"></p><p>快速修改 <code>UserAgent</code> 的插件，当需要请求移动端页面时，或者需要传特殊的 UA 时，不要忘记它。</p><h2 id="X-Forwarded-For-Header"><a href="#X-Forwarded-For-Header" class="headerlink" title="X-Forwarded-For Header"></a><a href="https://chrome.google.com/webstore/detail/x-forwarded-for-header/hkghghbnihliadkabmlcmcgmffllglin" target="_blank" rel="noopener">X-Forwarded-For Header</a></h2><p><img src="https://static.zkqiang.cn/images/20190729094902.png-slim" alt="X-Forwarded-For Header"></p><p>有时候网站过滤 IP 是通过请求 Headers 中的 <code>X-Forwarded-For</code> 字段，通过这个插件就可以修改此字段，用来快速进行判断。</p><h2 id="SwitchyOmega"><a href="#SwitchyOmega" class="headerlink" title="SwitchyOmega"></a><a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif" target="_blank" rel="noopener">SwitchyOmega</a></h2><p><img src="https://static.zkqiang.cn/images/20190729094908.png-slim" alt="SwitchyOmega"></p><p>快速切换 HTTP / Socks 代理的插件，还能根据匹配地址自动切换。另一个技巧是配合 Charles、Burp Suite 这类抓包工具，这些工具使用时需要设置本地代理，可以提前设置好用时就切换。</p><h2 id="Wappalyzer"><a href="#Wappalyzer" class="headerlink" title="Wappalyzer"></a><a href="https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg" target="_blank" rel="noopener">Wappalyzer</a></h2><p><img src="https://static.zkqiang.cn/images/20190811175102.png-slim" alt="Wappalyzer"></p><p>可以解析当前前端页面所使用的框架及服务支持，这样可以针对 Web 框架使用特殊的爬取方式。</p><h2 id="Web-Scraper"><a href="#Web-Scraper" class="headerlink" title="Web Scraper"></a><a href="https://chrome.google.com/webstore/detail/web-scraper/jnhgnonknehpejjnehehllkliplmbmhn" target="_blank" rel="noopener">Web Scraper</a></h2><p><img src="https://static.zkqiang.cn/images/20190811175103.png-slim" alt="Web Scraper"></p><p>又一个神器，如果只是简单的爬取数据，不需要部署和更复杂的操作，可以使用这款插件，内置在 Chrome 控制台，直接操作 Chrome 浏览器进行爬取，不需要写一行代码，支持多种导出格式。</p><h2 id="EditThisCookie"><a href="#EditThisCookie" class="headerlink" title="EditThisCookie"></a><a href="https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg" target="_blank" rel="noopener">EditThisCookie</a></h2><p><img src="https://static.zkqiang.cn/images/20190831161529.png-slim" alt="EditThisCookie"></p><p>爬虫遇到权限页面时，难免要对 Cookie 反复调试，这款插件可以对当前站点进行 Cookie 编辑，支持增删改查、导入导出、一键清空、搜索等功能。</p><h2 id="打包下载"><a href="#打包下载" class="headerlink" title="打包下载"></a>打包下载</h2><p>如果无法进入谷歌商店，可关注微信公众号：<strong>面向人生编程</strong> (可扫本页底部二维码)，回复”<strong>插件</strong>“获取打包下载。</p><blockquote><p><strong>转载声明</strong></p><p><strong>作者</strong>：张凯强<br><strong>原文链接</strong>：<a href="https://zkqiang.cn/posts/a46b4fd7/" target="_blank" rel="noopener">https://zkqiang.cn/posts/a46b4fd7/</a><br><strong>作者简介</strong>： 后端开发 / 游戏爱好者 / 巴萨球迷</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 直接转换公众号文章，不再为排版花时间</title>
      <link href="/2020/03/30/markdown-zhi-jie-zhuan-huan-gong-zhong-hao-wen-zhang-bu-zai-wei-pai-ban-hua-shi-jian/"/>
      <url>/2020/03/30/markdown-zhi-jie-zhuan-huan-gong-zhong-hao-wen-zhang-bu-zai-wei-pai-ban-hua-shi-jian/</url>
      
        <content type="html"><![CDATA[<p>上一篇<a href="https://mp.weixin.qq.com/s/fSjEizj-tqoMV7ior8XiLg" target="_blank" rel="noopener">「又一家数据公司被查，爬虫到底做错了什么？」</a>反响强烈，虽然我这是新号，但还是获得了不少公众号的转发，借机也结识了很多业内大佬，在此感谢大家的抬爱！</p><p>同时也有不少号主问我的文章排版是用的哪个网站，我的回答是：自己做的网站！</p><p>没错，这就是本文的主角<br>—— <strong><a href="http://prod.zkqiang.cn/wxeditor" target="_blank" rel="noopener">公众号 Markdown 编辑器</a></strong></p><p><img src="http://static.zkqiang.cn/images/20190913221225.png-slim" alt></p><p>这是我基于一位大佬 @Lyric 开发的项目，进行 Fork 后的二次开发，因为原项目已经几个月没更新，有一些排版 BUG；而且我需要对样式进行个性化定制，有一些逻辑与原项目有冲突之处，所以没有选择 PR。</p><p>上面截图，也就是我目前发文的格式，这是我自己定制的主题样式。</p><h2 id="有多好用？"><a href="#有多好用？" class="headerlink" title="有多好用？"></a>有多好用？</h2><p>先介绍下使用方式：在其他 Markdown 编辑器里写文章，全文粘贴到左栏，然后复制右栏，再粘贴到公众号后台，完了！</p><p>不需要再有多余的步骤，你复制过去的样式就是右栏看到的。</p><p><img src="http://static.zkqiang.cn/images/20190913213757.png-slim" alt></p><p>当然你也可以进行微调，比如添加字体的衬线、改字号，也有原作者提供的两种主题样式可选。</p><p>就是这款编辑器彻底<strong>解放</strong>了我。</p><p>毕竟我是公众号新人，对排版这种事情处于小白级别。我也知道传统情况下，文章写好只是发文的前半部分，还需要花大量时间去排版，给读者舒服的感觉，而该项目直接省掉了后半部分的时间，可以更专注于写作。</p><blockquote><p>另外，虽然是面向公众号，但经过测试，在其他不支持 Markdown 的平台上也同样可以使用。</p></blockquote><h2 id="更多细节"><a href="#更多细节" class="headerlink" title="更多细节"></a>更多细节</h2><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>通过定制支持了代码高亮的配色，我这里使用了大家熟悉的 Github 配色。</p><p><img src="http://static.zkqiang.cn/images/20190913214602.png-slim" alt></p><h3 id="注音符号"><a href="#注音符号" class="headerlink" title="注音符号"></a>注音符号</h3><p>这个是通过第三方库实现的，可以搞一些比如「丧心病狂{gàn・de・piào・liàng}」很有意思的效果。</p><p><img src="http://static.zkqiang.cn/images/20190913214803.png-slim" alt></p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>这也是个很有意思的功能点，公众号文章里放微信之外的链接，是无法点击跳转的，所以原作者把这种链接全部放在了文章末尾，就像学术文章的出处引用一样。</p><p><img src="http://static.zkqiang.cn/images/20190913215245.png-slim" alt></p><p>其他的细节可以看编辑器的默认文章。</p><h2 id="定制自己的样式"><a href="#定制自己的样式" class="headerlink" title="定制自己的样式"></a>定制自己的样式</h2><p>如果你不想和我雷同，或者觉得我的样式不好看，那也可以自己再定制，只需要一点前端 CSS 基础即可。</p><p>这里不建议你 Fork 后开发自用，我希望大家可以把更多样式 PR 给我，放入项目中开源出去。</p><p>另外我还会对编辑器里面的逻辑进行优化，还有一些基础功能也暂时缺失，比如没有保存、没有修改高亮样式、没有在页面就能改各种样式的功能，这些都在我计划之内，如果你有更好的想法也欢迎发给我。</p><p><a href="http://prod.zkqiang.cn/wxeditor" target="_blank" rel="noopener">&gt;&gt;&gt;&gt;&gt; 公众号编辑器地址 &lt;&lt;&lt;&lt;&lt;</a></p><blockquote><p><strong>转载声明</strong></p><p><strong>作者</strong>：张凯强<br><strong>原文链接</strong>：<a href="https://zkqiang.cn/posts/21edb9fa/" target="_blank" rel="noopener">https://zkqiang.cn/posts/21edb9fa/</a><br><strong>作者简介</strong>： 后端开发 / 游戏爱好者 / 巴萨球迷</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【干货】如何轻松拆解面试灵魂十大问？</title>
      <link href="/2020/03/30/gan-huo-ru-he-qing-song-chai-jie-mian-shi-ling-hun-shi-da-wen/"/>
      <url>/2020/03/30/gan-huo-ru-he-qing-song-chai-jie-mian-shi-ling-hun-shi-da-wen/</url>
      
        <content type="html"><![CDATA[<blockquote><p>下面来带大家看看，如何轻松拆解十大问</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="1-你最大的优点和缺点"><a href="#1-你最大的优点和缺点" class="headerlink" title="1.你最大的优点和缺点"></a>1.你最大的优点和缺点</h3><p>谈优点</p><p>不要笼统地说自己的优点，例如助人为乐，善解人意这些，没有意义。需要根据应聘岗位所需的特性有针对性地谈自己的有点。例如应聘产品经理，优点为逻辑能力强、善于与人沟通；应聘运营，优点为善于站在他人的角度为人着想，善于与人打交道等等。</p><p>谈缺点需要注意2点</p><p>1）避免谈职业致命缺点，比如：应聘产品经理，你说自己的缺点是思维混乱、没有时间观念，性格内向，那基本上就GG了</p><p>2）避免避重就轻，谈不算缺点的缺点，比如：工作进度快，容易让其他同事赶不上进度这些</p><p>可以谈已经找到方法并正在改正的缺点，并说清楚自己的改正计划，或者谈一个利用你的优点改正的缺点，顺便带出自己的一个优点等。例如：喜欢追求完美，导致任务延期，已经通过学习时间管理，有意识地改变工作方式，争取如期完成自己的工作</p><h3 id="2-你是否接受加班？"><a href="#2-你是否接受加班？" class="headerlink" title="2.你是否接受加班？"></a>2.你是否接受加班？</h3><p>面试官这样问，一般有2个意图。一就是公司经常加班，需要你明确表达个人意愿；二就是公司只是想了解你对这个问题的个人看法，以及你的工作态度。</p><p>-对于这种问题，作死的回答是：</p><p>-我无条件接受加班</p><p>-我会在工作时间完成自己的工作</p><p>-我不喜欢加班，不能接受加班</p><p>前两个回答太绝对，可信度不高，面试官也不会相信这个答案，最后的回答，大家都懂，没有面试官喜欢听到这样的答案。</p><p>建议大家回答的时候遵循以下原则：</p><p>·从言语中体现自己的抗压能力、责任心、以及工作效率</p><p>·强调工作需要，表现出积极心态，对于加班，具体情况具体对待。</p><p>大家可以这样机智回答：我很愿意接受挑战，但我会提高工作时间的效率，争取在规定的时间内完成工作。但如果工作任务紧急，我愿意和同事们一起加班完成工作，这也是我个人职责。</p><h3 id="3-你对薪资有什么要求吗？"><a href="#3-你对薪资有什么要求吗？" class="headerlink" title="3.你对薪资有什么要求吗？"></a>3.你对薪资有什么要求吗？</h3><p>这个问题往往是求职者认为很难回答的一个问题，说高了怕丢了offer，说低了，自己不愿意。有的同学干脆会说自己不太追求薪资，对薪资没要求。这样的回答，不仅让面试官觉得你对行业薪资没有最基本的认知，甚至认为你对自己没有信心，不敢谈薪资。</p><p>大家可以在面试前多去了解自己应聘的行业、企业、岗位的大概薪资范围，再自我评估一下自己各方面的条件，定一个自己满意的薪资区间。最后再现场评估自己面试的表现，面试官的态度，觉得有把握，可以在预设好薪资区间内多要点，反之可以保守一些。</p><h3 id="4-在五年的时间内，你的职业规划？"><a href="#4-在五年的时间内，你的职业规划？" class="headerlink" title="4.在五年的时间内，你的职业规划？"></a>4.在五年的时间内，你的职业规划？</h3><p> 一个对未来有规划的人，会认真踏实地工作，并有意识地提升自己，这是面试官需要确认的。这个问题需要你对该岗位的职业发展路径有一定的了解，知道晋升路径、花费的时间以及相应的能力需求。可以做以时间线做一个规划，例如1-3年，如何培养自己的什么技能、晋升为什么岗位。</p><h3 id="5-我们为什么要聘用你？"><a href="#5-我们为什么要聘用你？" class="headerlink" title="5.我们为什么要聘用你？"></a>5.我们为什么要聘用你？</h3><p>这句话的潜台词是“你凭什么胜任这个岗位”，这时候你就要向面试官展现出你的能力了。</p><p>一般可以围绕以下三回答这个问题：</p><p>-强调自己的能力与职位匹配，用数据、实例来证明自己可以胜任这个职位。</p><p>-描述你加入公司后能为公司带来什么，要达成什么的目标，为公司业绩带来多少增长等。</p><p>-展现自己的与职位相关的自身优势。</p><h3 id="6-你对于我们公司了解多少？"><a href="#6-你对于我们公司了解多少？" class="headerlink" title="6.你对于我们公司了解多少？"></a>6.你对于我们公司了解多少？</h3><p>这个问题就很难有当场取巧的回答方式了，建议大家应聘前要提前做好功课，到百度或者公司官网上了解一下该公司大概情况，例如：主营业务、近几年的重点业务、发展方向，近期的重大战略调整等等。</p><h3 id="7-你为什么愿意到我们公司？"><a href="#7-你为什么愿意到我们公司？" class="headerlink" title="7.你为什么愿意到我们公司？"></a>7.你为什么愿意到我们公司？</h3><p>面试官想通过你的回答了解2点。第一点是你的求职动机。第二点是你对企业是否有一定的了解。</p><p>那要怎么进行回答呢，建议从行业、企业、岗位三个角度去回答</p><p>-行业层面：通过宏观分析行业情况，表达你对行业发展前景的看好以及个人喜欢这个行业</p><p>-企业层面：提前熟悉公司的基本情况，表达出你对公司哪一方面的认同和赞赏（氛围/工作环境/发展前景等等）。</p><p>-岗位层面：充分了解应聘岗位的实际情况、职能范围与能力要求，表达自己对岗位的喜欢，并通过展现自己的自身优势，说服面试官你适合这个岗位。</p><h3 id="8-与上级意见不一致，如何处理？"><a href="#8-与上级意见不一致，如何处理？" class="headerlink" title="8.与上级意见不一致，如何处理？"></a>8.与上级意见不一致，如何处理？</h3><p>面试官希望通过这个问题，了解你为人处世，沟通交流的能力。</p><p>回答可以围绕这几个点进行展开：具体情况具体分析、沟通、换位思考、尊重</p><p>可以这样回答：首先我会尊重上级的意见，对于非原则性问题，我会选择去服从上级的安排。但对于涉及公司利益或者其他重大性的问题，我会选择换位思考，了解上级的想法后去和上级进行积极的沟通，告诉他我的想法，给予上级一些建议。</p><h3 id="9-你缺乏工作经验，如何能胜任这份工作？"><a href="#9-你缺乏工作经验，如何能胜任这份工作？" class="headerlink" title="9.你缺乏工作经验，如何能胜任这份工作？"></a>9.你缺乏工作经验，如何能胜任这份工作？</h3><p>遇到这个问题，大家不需要惊慌，因为大家都是应届生，没有工作经验是很正常的。只需要回答的时候能给出一个令人信服的答案即可。首先要谦虚地承认自己地经验不足，然后可以谈一下自己对岗位地理解，并表示出自己正在不断地学习，并举出实例。如果有相关地实习、项目经历，也可用来进行分析，充分展示自己。最后可以表明一下自己的决心。</p><h3 id="10-工作中与同事发生争执，你会怎么处理？"><a href="#10-工作中与同事发生争执，你会怎么处理？" class="headerlink" title="10.工作中与同事发生争执，你会怎么处理？"></a>10.工作中与同事发生争执，你会怎么处理？</h3><p>工作中遇到争执、意见不统一是经常事情，面试官想通过这个问题，了解你的处事能力，能不能很好地处理同事问题。</p><p>回答问题事抓住3点即可：</p><p>1、积极与同事进行沟通，并会在沟通前做好准备，对工作进行梳理，看看哪里有问题，提高沟通时的效率</p><p>2、沟通的时候多去倾听同事的意见，并作深入的思考，不会固执己见，不会一味盲目地坚持自己的管的</p><p>3、会通过一些数据、事实去印证自己观点，说服同事</p>]]></content>
      
      
      <categories>
          
          <category> 职前学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大经典排序算法整理汇总（附代码）</title>
      <link href="/2020/03/30/sort-algorithms/"/>
      <url>/2020/03/30/sort-algorithms/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【算法码上来】，每日算法干货马上就来！</p></blockquote><p><img src="https://godweiyang.com/medias/contact.jpg" alt></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。</p><p><strong>本文并不会详细讲解每种排序算法的原理</strong>，网上有很多很好的教程，大家可以自己去搜了看。</p><p>最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 <a href="https://leetcode-cn.com/problems/sort-an-array/" title="LeetCode 912. 排序数组" target="_blank" rel="noopener">LeetCode 912. 排序数组</a> 这道题。</p><h2 id="性质汇总"><a href="#性质汇总" class="headerlink" title="性质汇总"></a>性质汇总</h2><blockquote><p>如果发现表中有错误，请留言告知。</p></blockquote><table><thead><tr><th>算法</th><th>最好</th><th>最坏</th><th>平均</th><th>空间</th><th align="center">稳定性</th><th align="center">是否基于比较</th></tr></thead><tbody><tr><td>冒泡排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>选择排序</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>插入排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>快速排序</td><td>$O(n\log n)$</td><td>$O(n^2)$</td><td>$O(n\log n)$</td><td>$O(\log n)$~$O(n)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>归并排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>希尔排序</td><td>$O(n^{1.3})$</td><td>$O(n^2)$</td><td>$O(n\log n)$~$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>计数排序</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>基数排序</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>桶排序</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n+m)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>堆排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr></tbody></table><blockquote><p>如果表格显示有问题的话，还可以直接看下面的汇总图：</p></blockquote><p><img src="https://godweiyang.com/2020/02/16/sort-algorithms/1.png" alt="十大经典排序算法性质汇总"></p><h3 id="维基百科"><a href="#维基百科" class="headerlink" title="维基百科"></a>维基百科</h3><p>我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。</p><p><strong>冒泡排序</strong><br><a href="https://en.wikipedia.org/wiki/Bubble_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Bubble_sort</a></p><p><strong>选择排序</strong><br><a href="https://en.wikipedia.org/wiki/Selection_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Selection_sort</a></p><p><strong>插入排序</strong><br><a href="https://en.wikipedia.org/wiki/Insertion_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Insertion_sort</a></p><p><strong>快速排序</strong><br><a href="https://en.wikipedia.org/wiki/Quicksort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Quicksort</a></p><p><strong>归并排序</strong><br><a href="https://en.wikipedia.org/wiki/Merge_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Merge_sort</a></p><p><strong>希尔排序</strong><br><a href="https://en.wikipedia.org/wiki/Shellsort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Shellsort</a></p><p><strong>计数排序</strong><br><a href="https://en.wikipedia.org/wiki/Counting_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Counting_sort</a></p><p><strong>基数排序</strong><br><a href="https://en.wikipedia.org/wiki/Radix_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Radix_sort</a></p><p><strong>桶排序</strong><br><a href="https://en.wikipedia.org/wiki/Bucket_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Bucket_sort</a></p><p><strong>堆排序</strong><br><a href="https://en.wikipedia.org/wiki/Heapsort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Heapsort</a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>所有的排序算法接口都是相同的，也就是 <code>vector&lt;int&gt; xxxSort(vector&lt;int&gt;&amp; nums)</code> 。只需要你传入一个 <code>vector&lt;int&gt;</code> 类型的数组，就能返回排序后的结果。</p><p>运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sortArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 冒泡排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token number">-2</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 选择排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">selectSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> idx <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    idx <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 插入排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">insertSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 快速排序（24 ms）</span>    <span class="token keyword">void</span> <span class="token function">qSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">quickSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序（192 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> lnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> rnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rnums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序 + 非递归（80 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSortNR</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> n<span class="token operator">-</span>len<span class="token punctuation">;</span> l <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span>len<span class="token number">-1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token operator">-</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 希尔排序（40 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">shellSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j<span class="token operator">-</span>gap <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-</span><span class="token operator">=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计数排序（32 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">countSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> maxv<span class="token operator">-</span>minv<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">+</span>minv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 基数排序（不适用于负数）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">radixSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxv <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            maxv <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            maxd<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rank</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxd <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> count<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                rank<span class="token punctuation">[</span><span class="token operator">--</span>count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            maxd<span class="token operator">--</span><span class="token punctuation">;</span>            base <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 桶排序 (20 ms)</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bucketSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bs <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>maxv<span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">bucket</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bucket<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sz <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 堆排序（32 ms）</span>    <span class="token keyword">void</span> <span class="token function">adjust</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c1 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c2 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>c2<span class="token operator">&lt;</span>s <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>c2<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> c2 <span class="token operator">:</span> c1<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">heapSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>转载声明</strong></p><p><strong>作者</strong>：韦阳<br><strong>原文链接</strong>：<a href="https://godweiyang.com/2020/02/16/sort-algorithms/" target="_blank" rel="noopener">https://godweiyang.com/2020/02/16/sort-algorithms/</a><br><strong>作者简介</strong>：我是华东师范大学计算机科学与技术专业2018级硕士研究生。直研进入本校计算机系攻读硕士，研究方向是深度学习与自然语言处理。我们实验室是AntNLP，欢迎大家报考！欢迎关注我的微信公众号「算法码上来」，干货每天不错过！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试技巧+学习方法）美团后端实习一二面面经（已offer）</title>
      <link href="/2020/03/30/mian-shi-ji-qiao-xue-xi-fang-fa-mei-tuan-hou-duan-shi-xi-yi-er-mian-mian-jing-yi-offer/"/>
      <url>/2020/03/30/mian-shi-ji-qiao-xue-xi-fang-fa-mei-tuan-hou-duan-shi-xi-yi-er-mian-mian-jing-yi-offer/</url>
      
        <content type="html"><![CDATA[<p><strong>面试部门：美团到家事业群 - 闪购 base：北京  岗位：后台开发（实习）</strong></p><p>首先不得不吹吹美团的效率了：推完就收到笔试邮件，<strong>一二面一天走完</strong>，hr面久一点，20号一二面，刚才（26）收到hr电话，口头offer了，说可能offer要审批下，结果10分钟后offer就到邮箱了。！！！</p><p>吹爆美团面试官和hr小姐姐，一二面的体验都很好，跟平时聊天一样。两面都是视频面试，主要问项目和基础，研究生主要做的深度学习。面试主要问的基础方面。<br>先简单谈一谈学习路线和学习方法：<br>楼主研究生主要在做AI方向的研究，所以JAVA也算是自学半路转行，<strong>学习时间大约在3-4个月</strong>，所以我的学习方法可能并不适合所有人，较适合速成，然后找一份大厂实习。以下从算法、基础和项目三方面入手。</p><p><strong>算法</strong></p><p><strong>算法的重要性不需要我多提吧，这也是我把他放在首位的原因。</strong>告诉你两个例子：头条面试一般手撕4道算法题，面试官亲述：如果算法能力好，基础差一点没啥关系（很多人都是做其他方向的）。但是如果基础都答对了，算法没做好，基本没有机会。大厂在意的是潜力，而他们觉得算法正是证明你潜力的方法。很多人研究所做的都是其他方向，所以基础答的稍差（不能太差），也不会太影响。这样的例子其实很多。第二个<strong>例子</strong>：现在跟我在一起的实习生，不知道spring的ioc和aop，但是照样进了美团实习。<strong>大厂实习，你一定要努力对方向。</strong></p><p><strong>算法就是刷题，刷题无非牛客网和LeetCode。</strong>但是如果你刷过题，你应该百度过 <strong>刷题顺序、解题思路等等</strong>。刷题是没错，但是如何有效的刷题是一门学问，特别是对我们这种时间不是那么充裕的，没有时间总结大量解题套路的同学。做过一点题的应该多多少少有点自己的刷题心得，见到一个题，回溯法？二叉树？滑动窗口？双指针？等等。。。。<br>首先牛客网的<strong>剑指offer</strong>是必刷系列。<strong>这个能让你应付大部分面试</strong>，但人人都知道这个道理。所以这个不足以让你超越别人。所以你还得刷额外的题，总结一些热门的解题模板，也就是上面我说的回溯法解题模板，二叉树遍历解题模板等等。。。时间多的当然可以选择自己总结，这也是最好的，但是我的时间严重不足，所以我先需要吸收别人的，再基于此完善自己的。我当初是看到牛客网和身边师兄推荐的 <strong>左神算法 ，自己就买了，左神，不多解释啥，刷题的人应该都听过，相比于到处找其他资源，我当时直接买的牛客正版，组群刷题+课程辅导 = 高效。花钱买的是效率，这才是最终的！！！挂一下链接，通过以下链接购买可以便宜140哦~</strong></p><p><a href="https://www.nowcoder.com/courses/cover/live/350?coupon=AXPms6H" target="_blank" rel="noopener">https://www.nowcoder.com/courses/cover/live/350?coupon=AXPms6H</a></p><p><strong>基础</strong></p><p>基础主要就是个学习路线的问题，因为我也是照着网上大神的路线复习的，所以我就不发表拙见了。简单说说我的路线，网上star最多的就是JavaGuide和cyc2018，两个都有学习，我个人更喜欢JavaGuide，尤其是那个冲刺版，1月打牢基础不是梦。（学而不思则罔，思而不学则殆。不能光背啊，得综合思考。结合我下面说的面试技巧。）<br>看完基础，用牛客网的面经查补缺漏，用别人的面试经验考自己，一个面经就是一轮面试，同样的问题问到你，你自己怎么回答。（这里推荐看到一个问题，开始小声说答案，因为心里明白怎么回事和会表述是两码事。面试官也很看重沟通能力的，很多人明白是怎么回事，但是不知道怎么表述，把人都要急死。所以自己看面经的时候就开始自己学会组织语言吧。）</p><p><strong>项目</strong></p><p>项目放在最后，我自己的项目也很水，但是却是必须的。为什么？<strong>我不一定要给面试官看我的项目多么厉害，我要给他展示一个我在积极学习的形象。</strong>不用光用嘴巴说：我虽然不会，但是我可以学。请拿出你的行动，哪怕项目再水，说出你的学习过程和思考过程。一个积极的学习者永远比一个梦想家要强。<br>当然，如果你时间充足，请一定做一个亮眼的项目，一个亮眼的项目可以直接从初面问到终面，一直在问你熟悉的项目了，问你其他你不擅长的时间自然就少了（一般面试有规定时长）。</p><p>==============================================    我是一条华丽的分割线~    ==============================================</p><p>说一点<strong>面试心得（面试技巧）</strong>吧：</p><p><strong>如果说算法和基础是武当内功，那么面试技巧则是华山剑法。浑厚的内功让你在将来的学习开发中受益匪浅，但一时难以见效。而凌厉的剑法能让你快速拥有披荆斩棘的能力，让你在面试时无往不利。</strong></p><p>下面的东西均是楼主在各个大厂中的面试总结的经验，依葫芦画瓢是不可取的，<strong>建议每个人都在大量的面试中总结自己的面试经验，面试中有自己的节奏，开辟属于自己的一招一式。</strong><br>一般一次面试是30到60分钟，其实问的问题不太多，但是<strong>你能保证一个问题答得比较深，那么这个问题就是你的加分项！比如：</strong></p><p><strong>说出所有你知道的：</strong>第一个面试官问我，数组和ArrayList，这是第一个基础问题（不算简历上的），基本的说说区别，我 <strong>主动说了ArrayList的扩容机制，1.5倍扩容机制等等，然后引发和面试官的讨论（此处过去10多分钟）。所以我一面问的问题比较少，哈哈哈。</strong></p><p><strong>把一个问题研究到极致：hashmap：这个属于必问的吧！！</strong>一旦有面试官问我，<strong>我会从底层数据结构，hash冲突，拉链法，红黑树，再说hashmap线程不安全：put和resize两种。。</strong>这个问题慢慢说可以说10分钟，把这个问题整理全，绝对不亏。<strong>学习的时候就把这个问题整理好，面试的时候，说自己擅长的，比面试官问你不擅长的好的多！</strong></p><p><strong>联想答题：</strong>二面的问题5，当时这个问题我有点懵，不知道到底问的什么意思。我说我只知道，tcp会在传递的时候会给报文加个tcp头，然后面试官马上问我，tcp头里有啥？我当时想给自己一巴掌，确实没有去记过这个，把自己往火坑里推。然后我就联想，虽然我没有记过tcp头里有啥，但是我记过tcp属于运输层啊（<strong>常见面试问题，思考过程都要说出来，展示给面试官看</strong>），所以他一定有端口信息。接下来我接着说（<strong>tcp可靠运输我记过啊</strong>），tcp要保证可靠运输（<strong>又是一个面试题</strong>）：第一步是切片和排序，所以要有序号，其次tcp要校验数据，<strong>所以肯定有检验和</strong>。。。等等。我当时答完后，面试官就鼓励说：答得不错。。。<strong>成功把一个减分问题答成加分问题。</strong></p><p>准备期间看了很多牛客的面经，这次也算是回馈牛客了~以上是个人面试的一点拙见，大神轻喷😂。</p><h3 id="美团一面："><a href="#美团一面：" class="headerlink" title="美团一面："></a>美团一面：</h3><ol><li>问简历上的三个项目：</li></ol><p>a. 介绍一下项目</p><p>b. 遇到什么难点，怎么解决的</p><p>c. 分工</p><ol start="2"><li><p>电商项目</p></li><li><p>数组和arraylist的区别</p></li><li><p>Hashmap</p></li><li><p>Hashset</p></li><li><p>并发模块：两个关键字</p></li><li><p>接口和抽象类</p></li></ol><h3 id="美团二面："><a href="#美团二面：" class="headerlink" title="美团二面："></a>美团二面：</h3><ol><li><p>自我介绍，然后手撕股票买卖问题</p></li><li><p>http完整请求（客户端和服务端）：url和SpringMVC</p></li><li><p>三次握手</p></li><li><p>三次握手都会发送电报，目的是什么？</p></li><li><p>三次握手在TCP中是以什么形式进行的</p></li><li><p>TCP头有什么信息？</p></li><li><p>Https</p></li><li><p>java内存管理</p></li><li><p>垃圾回收，elden区域</p></li><li><p>怎么从main函数启动</p></li><li><p>进程和线程，为什么需要线程程</p></li><li><p>保证线程安全的方法。Lock加锁复习，synchronized优化复习</p></li><li><p>Linux内核，操作系统？C++</p></li><li><p>Linux查找那个线程使用CPU最大</p></li><li><p>谈项目：mybatis代码重构</p></li><li><p>mysql详谈</p></li><li><p>怎么构建索引，为什么选择自增（）</p></li><li><p>索引的类型，作用。联合索引，最左匹配原则</p></li><li><p>索引的底层，多路查找树。</p></li><li><p>B+树怎么查找</p></li><li><p>还是问 天猫项目</p></li><li><p>问AI的两个项目，别人为什么比你高？从项目中学到了什么？</p></li><li><p>大学学生会活动</p></li></ol><blockquote><p><strong>转载声明</strong></p><p><strong>作者</strong>：刷题inging<br><strong>原文链接</strong>：<a href="https://www.nowcoder.com/discuss/392955" target="_blank" rel="noopener">https://www.nowcoder.com/discuss/392955</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 职前学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员简历应该怎么写？</title>
      <link href="/2020/03/29/cheng-xu-yuan-jian-li-ying-gai-zen-me-xie/"/>
      <url>/2020/03/29/cheng-xu-yuan-jian-li-ying-gai-zen-me-xie/</url>
      
        <content type="html"><![CDATA[<p>作者：孙老师RickSun<br>链接：<a href="https://www.zhihu.com/question/19727053/answer/576285848" target="_blank" rel="noopener">https://www.zhihu.com/question/19727053/answer/576285848</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>看完大家的回答 ，让我感同身受。我曾经在Google工作过多年，经常面试同学，看过各种各样的简历。有的让我眼前一亮；有的简历看完后，却让我对求职者的第一印象减分不少。</p><p>回答里有很多general的简历减分项总结，接下来我想针对软件工程师求职，给大家分享我的同事——前谷歌面试官Vincent老师的采访，谈谈如何避开简历的雷区。</p><h2 id="雷区一：单纯地罗列技能或项目经历"><a href="#雷区一：单纯地罗列技能或项目经历" class="headerlink" title="雷区一：单纯地罗列技能或项目经历"></a>雷区一：单纯地罗列技能或项目经历</h2><p>对于刚毕业或转行CS的同学来说，写简历很容易“一时冲动”，<strong>堆积各种技术名词+项目经历，使简历显得大而空</strong>。这样急迫的心情是可以理解的。初出茅庐，同学们没有工作经验的积累，而大家又想向HR展示自己能力很强。</p><p>这种情况下，看似有效的方法，就是将接触过的一个又一个技术名词放上简历。然而残酷的现实是，<strong>面试官不会因为你堆砌经历就相信你是“王者”，反而觉得你在捏造经历</strong>。</p><p>那到底应该怎么做？为了让简历能够脱颖而出，你还需要在此基础上更进一步：<strong>用细节让这些项目经历变得丰满</strong>。</p><p>给大家举个例子。有一位同学简历上项目经历里有一句表达是：</p><blockquote><p>Designed and developed a web application with Java, Eclipse,Hadoop, AWS EC2, REST API.</p></blockquote><p>这句话看似清楚易懂，其实信息量很低，并没有达到让面试官一眼get到你能力的作用。这样写经历，首先是<strong>缺少了项目的context，面试官无从了解你的这个项目的完成时间和完成深度。另外，单纯的技术堆砌往往缺乏联系和逻辑。</strong></p><p>还是上面那个例子，这位同学继续在简历中写道：</p><blockquote><p>Deployed the system on AWS</p></blockquote><p>这个AWS本身没有错，但是你的项目为什么要部署到云上面去呢？之前遇到什么问题？你是带着目的性去部署这个系统，还是说仅仅为了学习AWS而去做的？其实稍作修改，写成“Deployed the system on AWS to improve scaling”，效果会好很多。这样可以证明应聘者是明白AWS用途的，而不是在单纯堆砌经历。雷区二：与岗位要求不匹配的经历此条减分项常出没于海投求职者的简历上。即使是只投软件工程师岗位，各个公司的工作内容也不尽相同，想靠一份简历通吃各大公司，不仅成功率不会太高，还会显得你不够重视此次简历的投递。我们拿2019年Amazon最新放出的一个职位为例：Software Development Engineer - IIJob ID: 770701Responsibilities· Mobile application software development, design and prototyping· Architecture of front- and back-end scaling solutions· Implement custom user interfaces using the latest mobile programming techniques……很多同学看到这个岗位的名字，就以为是一个general的软件工程师岗位，直接把自己的简历投了出去。实际上，这个职位虽然是Software Development Engineer，但从职责描述来看，更多是偏向APP开发的。如果你投的简历中，大部分内容都是后端或者网页端的内容，而没有Mobile Development的相关经历，没有用过最新的移动端技术和框架，拿到面试的机会就会大大下降。所以，看到一个职位，不能想当然，而是要多研究具体职责和要求，有的放矢地修改简历，才不至于浪费宝贵的机会。雷区三：过多的“精通 …”很多同学误以为，对技术的精通是拿到面试机会的门槛。于是，很多求职新手的简历上出现了大量的“精通……”，一片“拔苗助长”的景象。其实，你是否精通一门技术，面试中可能两三句对话就可以看出来了，绝不会逃过Hiring Manager的火眼金睛。在简历上弄虚作假，只会让面试官对你的印象大打折扣。以下对话在面试中时有出现：<img src="https://pic4.zhimg.com/50/v2-34beee804079b2cd748602b391c3a629_hd.jpg" data-caption data-size="normal" data-rawwidth="1080" data-rawheight="462" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic4.zhimg.com/v2-34beee804079b2cd748602b391c3a629_r.jpg">面试官：你很懂C/C++？太好了，能解释一下malloc和calloc的区别吗？求职者：嗯……这个……不太熟。<img src="https://pic1.zhimg.com/50/v2-b8548d93d6c9ee158fc9f22fac6105b0_hd.jpg" data-caption data-size="normal" data-rawwidth="1080" data-rawheight="294" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic1.zhimg.com/v2-b8548d93d6c9ee158fc9f22fac6105b0_r.jpg">面试官：看来你经常使用React。那假设一个网站是用React搭建，从用户在浏览器中输入了这个url，直到网页加载完毕，这整个过程中React做了哪些事情？求职者：啊……这个不太会……这种尴尬的场面，我想大家都不愿经历。简历上的“虚假繁荣”是很容易在面试中被拆穿的，自我包装也不等同于一味地夸大。想要漂亮的简历，同学们还是得稳扎稳打、切实提高能力。雷区四：没有放上工作样本链接程序员的工作内容都非常强调实践，为了“眼见为实”，面试官在考核过程中也会特别留心简历上有没有work samples的链接，以此来验证你的技术能力。没有work samples的链接，轻则失去了一次展示自我的机会，重则在面试官心目中留下了不专业的印象。Work sample可以包括：项目描述和截图Sample code贡献过代码的开源项目链接技术博客……雷区五：用词不当简历上的措辞是让很多同学头疼的问题，不是native speaker的我们也经常因为词汇量不够，反复使用“help、assist、do、responsible”等弱词。其实，简历上的用词也侧面反映了你的工作态度，你是不是take ownership，是不是认真对待工作中的每一个小任务，负起责任来。如果使用强度很弱的词，你完成的任务就显得不那么重要了，也弱化了你在团队中担任角色的重要程度。雷区六：毕业时间不明确毕业日期不明确，可能导致简历直接被挂！事实上，所有大公司都要求简历上的毕业时间是精确到具体年份和月份的，不能只写present，更不能不写。<img src="https://pic1.zhimg.com/50/v2-1d5b155b5c2f1e0008b834e0af7ccbaf_hd.jpg" data-caption data-size="normal" data-rawwidth="489" data-rawheight="112" class="origin_image zh-lightbox-thumb" width="489" data-original="https://pic1.zhimg.com/v2-1d5b155b5c2f1e0008b834e0af7ccbaf_r.jpg">因为毕业时间决定了你能不能申请全职、应届生或者实习生职位，是非常重要的参考信息。所以，已经毕业的同学一定要写好毕业年月；还没毕业的小伙伴，则可以写上预期的毕业时间。想要制作一份亮眼的简历并不是一件容易的事情。除了内容上的减分项外，排版杂乱、拼写错误、字体不一致等小细节都可能让面试官对你的印象大打折扣。如果在CS求职方面还有其他的疑问，可以私信联系我。</p><blockquote><p><strong>转载声明</strong></p><p><strong>作者</strong>：韦阳<br><strong>原文链接</strong>：<a href="https://godweiyang.com/2020/02/16/sort-algorithms/" target="_blank" rel="noopener">https://godweiyang.com/2020/02/16/sort-algorithms/</a><br><strong>作者简介</strong>：我是华东师范大学计算机科学与技术专业2018级硕士研究生。直研进入本校计算机系攻读硕士，研究方向是深度学习与自然语言处理。我们实验室是AntNLP，欢迎大家报考！欢迎关注我的微信公众号「算法码上来」，干货每天不错过！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 职前学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适合 Python 初学者的一些技巧和坑</title>
      <link href="/2020/03/20/gua-he-python-chu-xue-zhe-de-yi-xie-ji-qiao-he-keng/"/>
      <url>/2020/03/20/gua-he-python-chu-xue-zhe-de-yi-xie-ji-qiao-he-keng/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天董大 <a href="https://www.zhihu.com/people/6d23d8e16eb481e548032719bb5898a4" target="_blank" rel="noopener">@董伟明</a> 的爱派森上线了，还发了一套 PPT 和视频，PPT 共有75页干货，讲了很多进阶的用法，也包括很多坑，非常适合刚入门的同学，免得再踩到。</p><p><a href="https://zhuanlan.zhihu.com/p/33517855?utm_medium=social&utm_source=qq" target="_blank" rel="noopener">PPT和视频的传送门</a></p><p>这里我提取部分非常规的，也就是大部分教程里没有的，加入自己的理解，同时语法改为 Python 3，也争取延伸一些，就当是做笔记了。</p><h2 id="设置全局变量"><a href="#设置全局变量" class="headerlink" title="设置全局变量"></a>设置全局变量</h2><p>有时候设置全局变量的需求并不是直接赋值，而是想从某个数据结构里引用生成，可以用下面这两种方法，推荐第二种，<code>golbals()</code> 支持字典用法很方便。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token comment" spellcheck="true"># 粗暴的写法</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">exec</span> <span class="token string">"{}={}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> <span class="token comment" spellcheck="true"># 文艺的写法</span><span class="token operator">>></span><span class="token operator">></span> globals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">,</span> b<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> globals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'b'</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token string">'b'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h2><p>用 <code>format</code> 方法可以支持很多种格式，这里就不多说了，可以看官方文档。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{key}={value}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token string">"a"</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 使⽤命名参数</span><span class="token string">'a=10'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"[{0:&lt;10}], [{0:^10}], [{0:*>10}]"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 左中右对⻬</span><span class="token string">'[a         ], [    a     ], [*********a]'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{0.platform}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>sys<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 成员</span><span class="token string">'darwin'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{0[a]}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>dict<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 字典</span><span class="token string">'10'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{0[5]}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 列表</span><span class="token string">'5'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{0!r:20}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token string">"'Hello'             "</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{0!s:20}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token string">'Hello               '</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"Today is: {0:%a %b %d %H:%M:%S %Y}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'Today is: Mon Mar 31 23:59:34 2014'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表去重"><a href="#列表去重" class="headerlink" title="列表去重"></a>列表去重</h2><p>这里讲了两种方法，正常情况下 <code>set</code> 是更好的选择；</p><p>（注：这里董大视频讲解有误，方法一单位是1.1微妙，是慢于956纳秒，我也自己测试了，确实两种情况都不如 <code>set</code>）</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> list<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 利用构建字典键去重</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 列表去重(1)</span><span class="token operator">>></span><span class="token operator">></span> list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 常见set函数去重</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token operator">%</span>timeit list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">1000000</span> loops<span class="token punctuation">,</span> best of <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">956</span> ns per loopIn <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token operator">%</span>timeit list<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">1000000</span> loops<span class="token punctuation">,</span> best of <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">1.1</span> µs per loopIn <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> l <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token operator">%</span>timeit list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">1000</span> loops<span class="token punctuation">,</span> best of <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">271</span> µs per loopIn <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token operator">%</span>timeit <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">1000</span> loops<span class="token punctuation">,</span> best of <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">310</span> µs per loop <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="操作字典"><a href="#操作字典" class="headerlink" title="操作字典"></a>操作字典</h2><p>字典是 Python 很常用的数据结构，各种函数和方法要掌握。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> dict<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ⽤两个序列类型构造字典</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> dict<span class="token punctuation">(</span>zip<span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">,</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> dict<span class="token punctuation">(</span>map<span class="token punctuation">(</span>None<span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">,</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> None<span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> dict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ⽤序列做 key,并提供默认 value</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">{</span>k<span class="token punctuation">:</span>v <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> zip<span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 字典解析</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># key 存在,直接返回 value 1 </span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># key 不存在,先设置,后返回 200 </span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对字典进行逻辑操作"><a href="#对字典进行逻辑操作" class="headerlink" title="对字典进行逻辑操作"></a>对字典进行逻辑操作</h2><p>只能先转成键值对列表再进行操作，然后转回去；</p><p>(注：这里原文是 Python 2 中 <code>viewitems</code> 方法，已经被 <code>items</code> 替代)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> d1 <span class="token operator">=</span> dict<span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> d2 <span class="token operator">=</span> dict<span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> d1 <span class="token operator">&amp;</span> d2    <span class="token comment" spellcheck="true"># 字典不⽀支持该操作</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>TypeError<span class="token punctuation">:</span> unsupported operand type<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token operator">&amp;</span><span class="token punctuation">:</span> <span class="token string">'dict'</span> <span class="token operator">and</span> <span class="token string">'dict'</span><span class="token operator">>></span><span class="token operator">></span> v1 <span class="token operator">=</span> d1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> v2 <span class="token operator">=</span> d2<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> dict<span class="token punctuation">(</span>v1 <span class="token operator">&amp;</span> v2<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 交集</span><span class="token punctuation">{</span><span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> dict<span class="token punctuation">(</span>v1 <span class="token operator">|</span> v2<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 并集</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> dict<span class="token punctuation">(</span>v1 <span class="token operator">-</span> v2<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#差集(仅v1有,v2没有的)</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> dict<span class="token punctuation">(</span>v1 <span class="token operator">^</span> v2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 对称差集 (不会同时出现在 v1 和 v2 中)</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">in</span> v1 <span class="token comment" spellcheck="true">#判断</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vars"><a href="#vars" class="headerlink" title="vars"></a>vars</h2><p><code>vars()</code> 的作用是返回对象的属性和属性值的字典对象，如果没有参数，就打印当前调用位置的属性和属性值，类似 <code>locals()</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> vars<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">is</span> locals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> vars<span class="token punctuation">(</span>sys<span class="token punctuation">)</span> <span class="token keyword">is</span> sys<span class="token punctuation">.</span>__dict__    <span class="token comment" spellcheck="true"># 可用于找类属性</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现上下文管理类"><a href="#实现上下文管理类" class="headerlink" title="实现上下文管理类"></a>实现上下文管理类</h2><p>可以用来自动关闭 DB 连接</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> pymongo<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Operation</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> database<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                  host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">27017</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>_db <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                       host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">[</span>database<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">return</span> self<span class="token punctuation">.</span>_db<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>_db<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>disconnect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">with</span> Operation<span class="token punctuation">(</span>database<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> db<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span> db<span class="token punctuation">.</span>test<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="contextlib"><a href="#contextlib" class="headerlink" title="contextlib"></a>contextlib</h2><p>这个模块主要包含一个装饰器 <code>contextmanager</code> ，作用是可以省去像上面那样改写魔术魔法，也能实现同样的类</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> @contextlib<span class="token punctuation">.</span>contextmanager<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">def</span> <span class="token function">operation</span><span class="token punctuation">(</span>database<span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>                   port<span class="token operator">=</span><span class="token number">27017</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     db <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">[</span>database<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">yield</span> db<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     db<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>disconnect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> pymongo<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">with</span> operation<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> db<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>test<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="包的构建"><a href="#包的构建" class="headerlink" title="包的构建"></a>包的构建</h2><p>如果包里有一些模块不想被 <code>import *</code> 这样引用，可以用 <code>__all__</code> 把允许被引用的放进去；</p><p><code>__all__ = [&quot;add&quot;, &quot;x&quot;]</code></p><p>某些时候,包内的文件太多,需要分类存放到多个目录中,但⼜不想拆分成新的包或子包。这么做是允许的, 只要在 <code>__init__.py</code> 中⽤ <code>__path__</code> 指定所有子目录的全路径即可 (子目录可放在包外)，下面这段代码可以自动指定子目录。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> os<span class="token punctuation">.</span>path <span class="token keyword">import</span> abspath<span class="token punctuation">,</span> joinsubdirs <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">*</span>dirs<span class="token punctuation">:</span> <span class="token punctuation">[</span>abspath<span class="token punctuation">(</span>    join<span class="token punctuation">(</span>__path__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sub<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> sub <span class="token keyword">in</span> dirs<span class="token punctuation">]</span>__path__ <span class="token operator">=</span> subdirs<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="slots"><a href="#slots" class="headerlink" title="slots"></a><strong>slots</strong></h2><p>限制给类实例绑定属性，大量属性时减少内存占用</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     __slots__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> u <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token string">"Dong"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> hasattr<span class="token punctuation">(</span>u<span class="token punctuation">,</span> <span class="token string">"__dict__"</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> u<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"xxx"</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>AttributeError<span class="token punctuation">:</span> <span class="token string">'User'</span> object has no attribute <span class="token string">'title'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="cached-property"><a href="#cached-property" class="headerlink" title="@cached_property"></a>@cached_property</h2><p>主要实现的功能是，被装饰的类实例方法在第一次调用后，会把值缓存下来，下次再调用会直接从 <code>__dict__</code> 取结果，避免了多次计算；你可以参考下面的代码实现这个装饰器。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">cached_property</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment" spellcheck="true"># from werkzeug.utils import cached_property</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">,</span> name<span class="token operator">=</span>None<span class="token punctuation">,</span> doc<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>__name__ <span class="token operator">=</span> name <span class="token operator">or</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>__module__ <span class="token operator">=</span> func<span class="token punctuation">.</span>__module__<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>__doc__ <span class="token operator">=</span> doc <span class="token operator">or</span> func<span class="token punctuation">.</span>__doc__<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>func <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__get__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> type<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">if</span> obj <span class="token keyword">is</span> None<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         value <span class="token operator">=</span> obj<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> _missing<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">if</span> value <span class="token keyword">is</span> _missing<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             value <span class="token operator">=</span> self<span class="token punctuation">.</span>func<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             obj<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>self<span class="token punctuation">.</span>__name__<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">return</span> value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="元类里提前定义类方法"><a href="#元类里提前定义类方法" class="headerlink" title="元类里提前定义类方法"></a>元类里提前定义类方法</h2><p>这样可以像定义基类一样，提前给类定义一些方法。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">HelloMeta</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span> bases<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             cls<span class="token punctuation">.</span>func <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token keyword">print</span> <span class="token string">'hello world'</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         t <span class="token operator">=</span> type<span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span> bases<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         t<span class="token punctuation">.</span>__init__ <span class="token operator">=</span> __init__<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         t<span class="token punctuation">.</span>hello <span class="token operator">=</span> hello<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">return</span> t     <span class="token comment" spellcheck="true"># 最后要返回创建的类</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     __metaclass__ <span class="token operator">=</span> HelloMeta<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> h <span class="token operator">=</span> Hello<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> h<span class="token punctuation">.</span>hello<span class="token punctuation">(</span><span class="token punctuation">)</span>hello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="开发陷阱-一-：可变的默认参数"><a href="#开发陷阱-一-：可变的默认参数" class="headerlink" title="开发陷阱(一)：可变的默认参数"></a>开发陷阱(一)：可变的默认参数</h2><p>把临时变量作为默认参数里确实是不错的办法，但要警惕默认参数必须指向一个不可变类型，否则会踩到下面的坑</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">append_to</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> to<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     to<span class="token punctuation">.</span>append<span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> to<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">>></span><span class="token operator">></span> my_list <span class="token operator">=</span> append_to<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> my_list<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> my_other_list <span class="token operator">=</span> append_to<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> my_other_list<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 由于[]是可变类型，上次调用的元素还在里面</span><span class="token comment" spellcheck="true"># 正确的做法是如下</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">append_to</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> to<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">if</span> to <span class="token keyword">is</span> None<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         to <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     to<span class="token punctuation">.</span>append<span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> to<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="开发陷阱-二-：闭包变量绑定"><a href="#开发陷阱-二-：闭包变量绑定" class="headerlink" title="开发陷阱(二)：闭包变量绑定"></a>开发陷阱(二)：闭包变量绑定</h2><p>看懂这个坑，需要先理解闭包，推荐一篇文章；</p><p><a href="https://zhuanlan.zhihu.com/p/26934085" target="_blank" rel="noopener">刘志军：一步一步教你认识Python闭包</a><br>​<br>下面我更换了 PPT 里的代码，坑看得更清楚一些。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token keyword">return</span> x<span class="token operator">*</span>i<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> demo <span class="token keyword">in</span> create<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span> demo<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true"># 以为是 0 2 4 6 ，实际却是：</span><span class="token number">6</span><span class="token number">6</span><span class="token number">6</span><span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么会这样？<br>原因是：因为变量 i 是在闭包的作用域（demo 函数的外层作用域），而 Python 的闭包是迟绑定 ，这意味着闭包中用到的变量的值，是在内部函数被调用时查询得到的；</p><p>也就是说，<code>create()</code> 生成实例时，内部的 <code>for</code> 循环开始，使变量 i 的最终变成了 3，当随后循环调用闭包 <code>demo(2)</code> 时，在内部调用的 i 实际都是 3，要解决这个问题，可以如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> i<span class="token operator">=</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 把i绑定成demo的参数</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token keyword">return</span> x<span class="token operator">*</span>i<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">>></span><span class="token operator">></span> <span class="token comment" spellcheck="true"># 或者这样:</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> functools <span class="token keyword">import</span> partial<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> operator <span class="token keyword">import</span> mul<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">create_multipliers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> <span class="token punctuation">[</span>partial<span class="token punctuation">(</span>mul<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">>></span><span class="token operator">></span> <span class="token comment" spellcheck="true"># 另外我发现也可以改成生成器表达式：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">create_multipliers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">lambda</span> x <span class="token punctuation">:</span> i <span class="token operator">*</span> x <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>中间还有一些其他内建模块的用法，<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319347182373b696e637cc04430b8ee2d548ca1b36d000" target="_blank" rel="noopener">廖雪峰的教程</a>里都有，就不赘述</p><blockquote><p><strong>转载声明</strong></p><p><strong>作者</strong>：张凯强<br><strong>原文链接</strong>：<a href="https://zkqiang.cn/posts/92d33c1c/" target="_blank" rel="noopener">https://zkqiang.cn/posts/92d33c1c/</a><br><strong>作者简介</strong>： 后端开发 / 游戏爱好者 / 巴萨球迷</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>印象笔记 Markdown 入门指南</title>
      <link href="/2020/03/15/ru-he-rang-ni-de-jian-li-huan-ran-yi-xin/"/>
      <url>/2020/03/15/ru-he-rang-ni-de-jian-li-huan-ran-yi-xin/</url>
      
        <content type="html"><![CDATA[<p>2018年12月23日 新增 Windows 端新建笔记说明和隐藏「新建 Markdown 笔记」按钮的方法，以及整理了 Mac 和 Windows 已经支持的快捷键。</p><p>一、Markdown 是什么？<br>Markdown 是一种轻量级的「标记语言」，创始人为约翰·格鲁伯，用简洁的语法代替排版，目前被越来越多的知识工作者、写作爱好者、程序员或研究员广泛使用。其常用的标记符号不超过十个，相对于更为复杂的 HTML 标记语言来说，Markdown 十分的轻量，学习成本也不需要太多，且一旦熟悉这种语法规则，会有沉浸式编辑的效果。<br>另外，印象笔记 Markdown 支持 CommonMark 和 GFM (GitHub Flavored Markdown) 标准。</p><p>二、印象笔记里 Markdown 有什么特点？<br>    *<br>一键创建：支持 Markdown 独立的一键新建入口，为深度 Markdown 用户提供更好的效率体验；<br>    *<br>支持丰富的主流 Markdown 语法：支持文字相关样式、序号列表、任务列表、表格、TOC 目录、多种图表、数学公式、流程图、时序图、甘特图等；<br>    *<br>支持插入图片：可插入网络图片 或 直接拖动本地图片、复制剪贴板中的图片到 Markdown 笔记中；<br>    *<br>支持多种模式切换：编辑与预览模式、纯编辑模式以及纯预览模式；<br>    *<br>支持多种编辑主题：预置了白色、黑色、深空灰和印象绿主题，默认为印象绿，未来会有更多主题提供；<br>    *<br>跨平台同步：创建的 Markdown 笔记可在登录了印象笔记帐户的各端查看，未来更多端会支持创建和编辑 Markdown 笔记；<br>    *<br>演示模式：Markdown 笔记支持演示模式查看；<br>    *<br>支持其他印象笔记特点功能：笔记标注、导出 PDF、设置提醒、工作群聊共享-查看&amp;编辑笔记等。</p><p>三、如何创建 Markdown 笔记？<br>    1.<br>点击左上角「新建 Markdown 笔记」来创建新的 Markdown 笔记，另外，也支持配置隐藏「新建 Markdown 笔记」按钮，Windows 用户直接右单击「新建 Markdown 笔记」按钮，即可隐藏，Mac 用户可以右单击左侧边栏空白处，取消勾选「新建 Markdown 笔记」来完成隐藏此按钮<br>    2.<br>点击菜单栏-文件-新建笔记-新建 Markdown 笔记（Mac 上为顶部菜单栏-文件-新建 Markdown笔记）<br>    3.<br>使用快捷键 Ctrl+alt+D（Mac 上 CMD+D）来快速创建 Markdown 笔记</p><p>四、印象笔记 Markdown 笔记支持哪些语法？<br>—— 以下语法均支持在编辑工具栏直接操作 ——<br>    1.<br>设置分级标题</p><p>语法示例：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><pre><code>1. </code></pre><p>加粗文本</p><p>语法示例：</p><p><strong>印象笔记</strong></p><pre><code>1. </code></pre><p>斜体</p><p>语法示例：</p><p><em>印象笔记</em></p><pre><code>1. </code></pre><p>下划线</p><p>语法示例：</p><p><u>印象笔记</u></p><pre><code>1. </code></pre><p>删除线</p><p>语法示例：</p><p><del>印象笔记不支持Markdown</del></p><pre><code>1. </code></pre><p>添加分隔线</p><p>语法示例：</p><hr><pre><code>1. </code></pre><p>引用文本</p><p>语法示例：</p><blockquote><p>近日，印象笔记宣布完成重组。作为Evernote已在中国独立运营近6年的品牌，印象笔记将成为由中方控股的中美合资独立运营实体，并获得红杉宽带跨境数字产业基金首轮数亿元人民币投资。</p></blockquote><pre><code>1. </code></pre><p>添加符号列表或者数字列表</p><p>语法示例：</p><p>使用 iOS 版本印象笔记如何快速保存内容？</p><ol><li>启用印象笔记 Widget ——印象笔记·剪贴板</li><li>复制粘贴任意内容<ul><li>微信</li></ul></li><li>滑动到 Widget 插件区域即可完成保存<br>印象笔记·剪贴板有什么特点？</li></ol><ul><li>快：开启自动模式，可以自动保存剪贴板的任意内容</li><li>一切：只要可以复制粘贴就可以保存</li><li>有序：全部保存在「我的剪贴板」笔记本并以时间来命名</li></ul><pre><code>1. </code></pre><p>添加待办事项</p><p>语法示例：</p><p>三只青蛙</p><ul><li><input checked disabled type="checkbox"> 第一只青蛙</li><li><input disabled type="checkbox"> 第二只青蛙</li><li><input disabled type="checkbox"> 第三只青蛙</li></ul><pre><code>1. </code></pre><p>插入链接</p><p>语法示例：</p><p><a href="https://www.yinxiang.com/" target="_blank" rel="noopener">印象笔记官网</a></p><pre><code>1. </code></pre><p>插入图片</p><p>印象笔记支持嵌入网络图片或者直接拖入本地图片，其中本地图片格式支持 jpg、png 和 gif。<br>语法示例：</p><p><img src="https://www.yinxiang.com/blog/wp-content/uploads/2018/07/%E5%94%AE%E7%A5%A8%E5%BE%AE%E4%BF%A1%E5%B0%81%E9%9D%A22.png" alt="image"></p><p>另外，针对插入的本地图片可以控制图片大小，在拖拽、拷贝或者点击插入本地图片之后，直接在图片名称后面（无需空格）添加以下语法均可以按照以下要求控制图片大小：<br>    *<br>@w=300<br>    *<br>@h=150<br>    *<br>@w=200h=100<br>    *<br>@h=100w=200</p><p>示例笔记</p><p>782d277a1dbc7dea8480267cf5f87ebd.png@w=300</p><pre><code>1. </code></pre><p>插入表格</p><p>语法示例：</p><table><thead><tr><th>帐户类型</th><th>免费帐户</th><th>标准帐户</th><th>高级帐户</th></tr></thead><tbody><tr><td>帐户流量</td><td>60M</td><td>1GB</td><td>10GB</td></tr><tr><td>设备数目</td><td>2台</td><td>无限制</td><td>无限制</td></tr><tr><td>当前价格</td><td>免费</td><td>￥8.17/月</td><td>￥12.33/月</td></tr></tbody></table><pre><code>1. </code></pre><p>插入图表</p><p>目前支持饼状图、折线图、柱状图和条形图，只需将 type 改为对应的pie、line、column 和 bar。</p><pre class="line-numbers language-chart"><code class="language-chart">,预算,收入,花费,债务June,5000,8000,4000,6000July,3000,1000,4000,3000Aug,5000,7000,6000,3000Sep,7000,2000,3000,1000Oct,6000,5000,4000,2000Nov,4000,3000,5000,type: pietitle: 每月收益x.title: Amounty.title: Monthy.suffix: $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1. </code></pre><p>插入行内代码或代码块</p><p>印象笔记 Markdown 语法支持几十种编程语言的高亮的显示。（ 点击这里可以了解已经被高亮支持的语法）<br>语法示例：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">import</span> reline <span class="token operator">=</span> <span class="token string">"Cats are smarter than dogs"</span>matchObj <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span> r<span class="token string">'(.*) are (.*?) .*'</span><span class="token punctuation">,</span> line<span class="token punctuation">,</span> re<span class="token punctuation">.</span>M<span class="token operator">|</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token keyword">if</span> matchObj<span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">"matchObj.group() : "</span><span class="token punctuation">,</span> matchObj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"matchObj.group(1) : "</span><span class="token punctuation">,</span> matchObj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"matchObj.group(2) : "</span><span class="token punctuation">,</span> matchObj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">"No match!!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1. </code></pre><p>插入数学公式</p><p>印象笔记 Markdown 支持绝大多数的 LaTeX 数学公式<br>语法示例：</p><pre class="line-numbers language-math"><code class="language-math">e^{i\pi} + 1 = 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更多数学公式的输入可以参考： <a href="https://khan.github.io/KaTeX/docs/supported.html" target="_blank" rel="noopener">https://khan.github.io/KaTeX/docs/supported.html</a></p><pre><code>1. </code></pre><p>插入流程图</p><p>语法示例：</p><pre class="line-numbers language-mermaid"><code class="language-mermaid">graph TDA[模块A] -->|A1| B(模块B)B --> C{判断条件C}C -->|条件C1| D[模块D]C -->|条件C2| E[模块E]C -->|条件C3| F[模块F]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1. </code></pre><p>插入时序图</p><p>语法示例：</p><pre class="line-numbers language-mermaid"><code class="language-mermaid">sequenceDiagramA->>B: 是否已收到消息？B-->>A: 已收到消息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>1. </code></pre><p>插入甘特图</p><p>语法示例：</p><pre class="line-numbers language-mermaid"><code class="language-mermaid">gantttitle 甘特图dateFormat YYYY-MM-DDsection 项目A任务1 :a1, 2018-06-06, 30d任务2 :after a1 , 20dsection 项目B任务3 :2018-06-12 , 12d任务4 : 24d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1. </code></pre><p>设置目录</p><p>设置之后可以自动根据设置的分级标题来自动生成目录。<br>语法示例：</p><p>[TOC]</p><p>五、印象笔记 Markdown 支持什么快捷键？<br>Windows 端</p><p>新建 Markdown 笔记<br>Ctrl+Alt+D<br>粗体<br>Ctrl+B<br>斜体<br>Ctrl+I<br>删除线<br>Ctrl+T<br>下划线<br>Ctrl+U<br>分隔线<br>Ctrl + Shift + -<br>编号列表<br>Ctrl + Shift + O<br>项目符号列表<br>Ctrl + Shift + W<br>插入待办事项<br>Ctrl + Shift + C<br>代码块<br>Ctrl+Shift+L<br>插入日期和时间<br>Alt + Shift + D<br>撤销<br>Ctrl+Z<br>在笔记内搜索<br>Ctrl+F<br>Mac 端<br>新建 Markdown 笔记<br>CMD+D<br>粗体<br>CMD+B<br>斜体<br>CMD+I<br>删除线<br>CMD+S<br>分隔线<br>CMD+L<br>编号列表<br>CMD+Shift+O<br>项目符号列表<br>CMD+Shift+U<br>插入待办事项<br>CMD+Shift+T<br>代码块<br>CMD+Shift+P<br>撤销<br>CMD+Z<br>在笔记内搜索<br>CMD+F</p><blockquote><p><strong>转载声明</strong></p><p><strong>作者</strong>：印象笔记<br><strong>原文链接</strong>：<a href="https://list.yinxiang.com/" target="_blank" rel="noopener">https://list.yinxiang.com/</a><br>markdown/4ea3a3dc-f6f5-46d6-b2f7-6248bb509966.php</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 职前学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
